[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "load_csv",
        "kind": 2,
        "importPath": "utils.helper",
        "description": "utils.helper",
        "peekOfCode": "def load_csv(file_path):\n    if os.path.exists(file_path):\n        return pd.read_csv(file_path)\n    else:\n        raise FileNotFoundError(f\"File {file_path} tidak ditemukan.\")\ndef save_csv(df, file_path):\n    df.to_csv(file_path, index=False)\n    print(f\"Data disimpan ke {file_path}\")",
        "detail": "utils.helper",
        "documentation": {}
    },
    {
        "label": "save_csv",
        "kind": 2,
        "importPath": "utils.helper",
        "description": "utils.helper",
        "peekOfCode": "def save_csv(df, file_path):\n    df.to_csv(file_path, index=False)\n    print(f\"Data disimpan ke {file_path}\")",
        "detail": "utils.helper",
        "documentation": {}
    },
    {
        "label": "SentimentClassifier",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class SentimentClassifier(nn.Module):\n    def __init__(self, model_name='indobenchmark/indobert-base-p1', num_labels=3):\n        super(SentimentClassifier, self).__init__()\n        self.bert = AutoModel.from_pretrained(model_name)\n        self.classifier = nn.Linear(self.bert.config.hidden_size, num_labels)\n        self.num_labels = num_labels\n    def forward(self, input_ids, attention_mask):\n        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)\n        pooled_output = outputs.last_hidden_state[:, 0, :]\n        logits = self.classifier(pooled_output)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']\n# Fungsi untuk analisis sentimen\ndef analyze_sentiment(texts):\n    results = []\n    for text in texts:\n        inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=128)\n        with torch.no_grad():\n            outputs = model(**inputs)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "analyze_sentiment",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def analyze_sentiment(texts):\n    results = []\n    for text in texts:\n        inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=128)\n        with torch.no_grad():\n            outputs = model(**inputs)\n        prediction = torch.argmax(outputs, dim=-1).item()\n        # Map prediction to label (sesuaikan dengan model Anda)\n        sentiment_labels = {0: 'Negatif', 1: 'Netral', 2: 'Positif'}\n        sentiment = sentiment_labels.get(prediction, 'Tidak Diketahui')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/analyze', methods=['POST'])\ndef analyze():\n    if 'file' not in request.files:\n        flash('Tidak ada file yang diunggah')\n        return redirect(url_for('index'))\n    file = request.files['file']\n    if file.filename == '':\n        flash('Tidak ada file yang dipilih')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "analyze",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def analyze():\n    if 'file' not in request.files:\n        flash('Tidak ada file yang diunggah')\n        return redirect(url_for('index'))\n    file = request.files['file']\n    if file.filename == '':\n        flash('Tidak ada file yang dipilih')\n        return redirect(url_for('index'))\n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = '212192919291eu2eu1ueu'\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['ALLOWED_EXTENSIONS'] = {'csv'}\n# Load model (sesuaikan dengan arsitektur model Anda)\nclass SentimentClassifier(nn.Module):\n    def __init__(self, model_name='indobenchmark/indobert-base-p1', num_labels=3):\n        super(SentimentClassifier, self).__init__()\n        self.bert = AutoModel.from_pretrained(model_name)\n        self.classifier = nn.Linear(self.bert.config.hidden_size, num_labels)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = '212192919291eu2eu1ueu'\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['ALLOWED_EXTENSIONS'] = {'csv'}\n# Load model (sesuaikan dengan arsitektur model Anda)\nclass SentimentClassifier(nn.Module):\n    def __init__(self, model_name='indobenchmark/indobert-base-p1', num_labels=3):\n        super(SentimentClassifier, self).__init__()\n        self.bert = AutoModel.from_pretrained(model_name)\n        self.classifier = nn.Linear(self.bert.config.hidden_size, num_labels)\n        self.num_labels = num_labels",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['ALLOWED_EXTENSIONS'] = {'csv'}\n# Load model (sesuaikan dengan arsitektur model Anda)\nclass SentimentClassifier(nn.Module):\n    def __init__(self, model_name='indobenchmark/indobert-base-p1', num_labels=3):\n        super(SentimentClassifier, self).__init__()\n        self.bert = AutoModel.from_pretrained(model_name)\n        self.classifier = nn.Linear(self.bert.config.hidden_size, num_labels)\n        self.num_labels = num_labels\n    def forward(self, input_ids, attention_mask):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['ALLOWED_EXTENSIONS']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['ALLOWED_EXTENSIONS'] = {'csv'}\n# Load model (sesuaikan dengan arsitektur model Anda)\nclass SentimentClassifier(nn.Module):\n    def __init__(self, model_name='indobenchmark/indobert-base-p1', num_labels=3):\n        super(SentimentClassifier, self).__init__()\n        self.bert = AutoModel.from_pretrained(model_name)\n        self.classifier = nn.Linear(self.bert.config.hidden_size, num_labels)\n        self.num_labels = num_labels\n    def forward(self, input_ids, attention_mask):\n        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model = SentimentClassifier()\nmodel.load_state_dict(torch.load('model/sentiment_model.pth', map_location=torch.device('cpu')))\nmodel.eval()\n# Tokenizer\ntokenizer = AutoTokenizer.from_pretrained('indobenchmark/indobert-base-p1')\n# Fungsi untuk memeriksa ekstensi file\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']\n# Fungsi untuk analisis sentimen",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained('indobenchmark/indobert-base-p1')\n# Fungsi untuk memeriksa ekstensi file\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']\n# Fungsi untuk analisis sentimen\ndef analyze_sentiment(texts):\n    results = []\n    for text in texts:\n        inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=128)",
        "detail": "app",
        "documentation": {}
    }
]