[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "load_csv",
        "kind": 2,
        "importPath": "utils.helper",
        "description": "utils.helper",
        "peekOfCode": "def load_csv(file_path):\n    if os.path.exists(file_path):\n        return pd.read_csv(file_path)\n    else:\n        raise FileNotFoundError(f\"File {file_path} tidak ditemukan.\")\ndef save_csv(df, file_path):\n    df.to_csv(file_path, index=False)\n    print(f\"Data disimpan ke {file_path}\")",
        "detail": "utils.helper",
        "documentation": {}
    },
    {
        "label": "save_csv",
        "kind": 2,
        "importPath": "utils.helper",
        "description": "utils.helper",
        "peekOfCode": "def save_csv(df, file_path):\n    df.to_csv(file_path, index=False)\n    print(f\"Data disimpan ke {file_path}\")",
        "detail": "utils.helper",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/reviews')\ndef reviews():\n    if df is not None:\n        search_query = request.args.get('search', '').lower()\n        filtered_df = df\n        if search_query:\n            filtered_df = df[\n                df['userName'].str.lower().str.contains(search_query) |",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "reviews",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def reviews():\n    if df is not None:\n        search_query = request.args.get('search', '').lower()\n        filtered_df = df\n        if search_query:\n            filtered_df = df[\n                df['userName'].str.lower().str.contains(search_query) |\n                df['content'].str.lower().str.contains(search_query) |\n                df['category'].str.lower().str.contains(search_query) |\n                df['score'].astype(str).str.contains(search_query)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "visualize",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def visualize():\n    if df is not None:\n        if 'category' not in df.columns:\n            return \"Kolom 'category' tidak ditemukan di data.\"\n        # Hitung jumlah setiap kategori\n        category_counts = df['category'].value_counts().to_dict()\n        labels = list(category_counts.keys())\n        values = list(category_counts.values())\n        return render_template('visualize.html', labels=labels, values=values)\n    else:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# Load data CSV saat server start\ntry:\n    df = pd.read_csv('data/reviews_flip_2025.csv')  # Ganti nama file sesuai kebutuhan\n    # Tambahkan kolom category berdasarkan score\n    def classify_sentiment(score):\n        if score >= 4:\n            return 'Baik'\n        elif score == 3:\n            return 'Netral'",
        "detail": "app",
        "documentation": {}
    }
]